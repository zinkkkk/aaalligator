#[cfg(test)]
mod tests {
    use crate::{continuum_tests::NEGONE_TO_ONE, *};

    #[test]
    fn basic_functions() {

        let f = |x: f64| (1.05 - x).sin();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| (-1.0 / (x * x)).exp();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        println!("dif {:?}", dif / (NEGONE_TO_ONE.len() as f64));
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 4e-13);

        let f = |x: f64| (-100.0 * x * x).exp();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| (-10.0 / (1.2 - x)).exp();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 1e-12);

        let f = |x: f64| 1.0 / (1.0 + (100.0 * (x + 0.5)).exp());
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        // i dunno whats the go with this one lol;
        // let f = |x: f64| (100.0 * x).sin() * (-10.0 * x * x).exp();
        // let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        // let r = approx.evaluate_handle();
        // let mut dif = 0.0;
        // for i in NEGONE_TO_ONE {
        //     dif += (r(i) - f(i)).abs();
        // }
        // println!("diff {}", dif);
        // println!("deg {}", approx.nodes.len());
        // assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 1e-11);

        let f = |x: f64| x.abs();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 1e-8);

        let f = |x: f64| (x - 0.95).abs();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 1e-6);
    }

    #[test]
    fn low_accuracy() {
        let f = |x: f64| (3.0 * x).exp();
        let approx = aaa_continuum(f, None, 150, 0, 1e-4, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) > 1e-8);
    }

    #[test]
    fn vertical_scaling() {
        let f = |x: f64| 1e100 * x.sin();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += r(i) - f(i);
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        println!("start ver");
        let f = |x: f64| 1e-100 * x.cos();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        println!("diff {}", dif);
        println!("deg {}", approx.nodes.len());
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);
    }

    #[test]
    fn polynomials_and_reciprocals() {
        let f = |x: f64| x;
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| x + x * x;
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| x + x * x * x;
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| 1.0 / (1.1 + x);
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| 1.0 / (3.0 + x + x * x);
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| 1.0 / (1.01 + x * x * x);
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);
    }

    #[test]
    fn specified() {
        let f = |x: f64| x;
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| x + x * x;
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| x + x * x * x;
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| 1.0 / (1.1 + x);
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| 1.0 / (3.0 + x + x * x);
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| 1.0 / (1.01 + x * x * x);
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| (100.0 * x).tanh();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += (r(i) - f(i)).abs();
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| (100.0 * (x - 0.2)).tanh();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += r(i) - f(i);
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);

        let f = |x: f64| x.exp();
        let approx = aaa_continuum(f, None, 150, 0, 1000.0 * f64::EPSILON, 10, 3);
        let r = approx.evaluate_handle();
        let mut dif = 0.0;
        for i in NEGONE_TO_ONE {
            dif += r(i) - f(i);
        }
        assert!(dif / (NEGONE_TO_ONE.len() as f64) <= 2e-13);
    }
}

const NEGONE_TO_ONE: [f64; 1001] = [
    -1.0, -0.9331251175078248, -0.8707224849239918, -0.8124930210614051, -0.7581576457522112, -0.7074559422819879,
    -0.6601449092734889, -0.6159977960380167, -0.5748030158125355, -0.5363631316739242,
    -0.5004939102700954, -0.4670234388327335, -0.4357913012397029, -0.40664780917818566,
    -0.37945328472369405, -0.35407739089652707, -0.33039850698718587, -0.3083031456568277,
    -0.28768540901905937, -0.2684464810961964, -0.2504941542174503, -0.23374238708918155,
    -0.218110892419152, -0.20352475211835772, -0.18991405823619345, -0.17721357790803594,
    -0.16536244070941808, -0.15430384691835647, -0.1439847952876008, -0.1343558290220826,
    -0.12537079874409204, -0.11698664131013073, -0.1091631734193615, -0.10186289902446875,
    -0.09505082962189512, -0.08869431656014709, -0.08276289456246348, -0.07722813571388647,
    -0.07206351321293053, -0.0672442742348425, -0.06274732129711577, -0.05855110155867241,
    -0.054635503522148784, -0.050981760644204246, -0.0475723613918789, -0.04439096531392171,
    -0.041422324724838956, -0.03865221162631264, -0.03606734951574028, -0.033655349755070944,
    -0.03140465219496752, -0.02930446976972143, -0.027344736797375813, -0.02551606073727185,
    -0.023809677173803584, -0.022217407810628847, -0.02073162127401231, -0.019345196537440452,
    -0.018051488792211093, -0.016844297600423153, -0.015717837177731626, -0.014666708663439686,
    -0.013685874245025185, -0.01277063301308644, -0.011916598430985593, -0.011119677311206989,
    -0.010376050197669117, -0.009682153059967086, -0.009034660211810534, -0.008430468371788968,
    -0.007866681790071581, -0.007340598369757212, -0.006849696716357447, -0.006391624053344006,
    -0.005964184945842466, -0.005565330778427646, -0.005193149936590212, -0.004845858644816496,
    -0.004521792417370702, -0.0042193980808050285, -0.0039372263299634795, -0.0036739247818020743,
    -0.0034282314937339707, -0.0031989689154345376, -0.0029850382451187324, -0.002785414163241766,
    -0.002599139918382933, -0.002425322741760353, -0.0022631295683995297, -0.0021117830444482445,
    -0.0019705578015018, -0.0018387769800823268, -0.0017158089856100047, -0.0016010644613183177,
    -0.0014939934636052578, -0.0013940828262825786, -0.0013008537010905706, -0.0012138592626906278,
    -0.0011326825671361539, -0.0010569345535579883, -0.0009862521794868784, -0.0009202966808760419,
    -0.0008587519484845171, -0.0008013230128396887, -0.0007477346305177588, -0.0006977299649665538,
    -0.0006510693555481462, -0.0006075291689016071, -0.0005669007271207433, -0.0005289893076098151,
    -0.0004936132098237916, -0.0004606028844202403, -0.00042980012064907985, -0.0004010572880855496,
    -0.0003742366290721981, -0.00034920959847872714, -0.00032585624761532263, -0.0003040646493467069,
    -0.00028373036165162114, -0.00026475592705670666, -0.00024705040554568255, -0.00023052893870517083,
    -0.00021511234301821672, -0.00020072673035625703, -0.00018730315385064364, -0.00017477727744646807,
    -0.00016308906755493327, -0.0001521825053264387, -0.00014200531816536833, -0.00013250872919979526,
    -0.0001236472235053715, -0.00011537832996296608, -0.00010766241770454933, -0.00010046250617173413,
    -9.374408787663e-5, -8.747496301554415e-5, -8.162508514287237e-5, -7.616641716552892e-5,
    -7.107279696773412e-5, -6.631981202212676e-5, -6.188468238624383e-5, -5.774615152359826e-5,
    -5.3884384426082236e-5, -5.028087254942475e-5, -4.691834510607799e-5, -4.3780686290381665e-5,
    -4.0852858039285654e-5, -3.812082795843888e-5, -3.5571502068213896e-5, -3.31926620473319e-5,
    -3.0972906673314065e-5, -2.8901597179095115e-5, -2.6968806263906926e-5, -2.516527051405394e-5,
    -2.3482346005542763e-5, -2.1911966875781472e-5, -2.0446606665791178e-5, -1.907924224765265e-5,
    -1.7803320164301157e-5, -1.661272522034293e-5, -1.5501751173357687e-5, -1.4465073385216472e-5,
    -1.3497723302339418e-5, -1.2595064642583589e-5, -1.1752771174629452e-5, -1.0966805983368674e-5,
    -1.0233402121916423e-5, -9.549044557518079e-6, -8.910453324821521e-6, -8.314567805772065e-6,
    -7.758532060787827e-6, -7.2396811409108765e-6, -6.75552831533164e-6, -6.3037531530712815e-6,
    -5.882190401699956e-6, -5.488819609789677e-6, -5.121755443364241e-6, -4.779238649935595e-6,
    -4.459627626819096e-6, -4.161390553316707e-6, -3.883098049059609e-6, -3.6234163233231498e-6,
    -3.381100782480682e-6, -3.1549900649580885e-6, -2.9440004751000336e-6, -2.7471207892708145e-6,
    -2.563407409296515e-6, -2.391979840020237e-6, -2.2320164692952345e-6, -2.0827506301905143e-6,
    -1.943466926536022e-6, -1.8134978041964953e-6, -1.6922203516410355e-6, -1.579053314474176e-6,
    -1.4734543096198343e-6, -1.3749172258064205e-6, -1.2829697978941475e-6, -1.1971713434189682e-6,
    -1.1171106505048242e-6, -1.0424040070215557e-6, -9.72693361542618e-7, -9.076446072885357e-7,
    -8.469459808314593e-7, -7.903065678861348e-7, -7.374549090259546e-7, -6.88137698641567e-7,
    -6.421185709064758e-7, -5.991769669310625e-7, -5.591070776755293e-7, -5.217168575554344e-7,
    -4.868271040122284e-7, -4.5427059863740426e-7, -4.2389130573387833e-7, -3.9554362447347016e-7,
    -3.6909169106627744e-7, -3.4440872759738236e-7, -3.2137643441002754e-7, -2.9988442312310307e-7,
    -2.798296875655116e-7, -2.6111611009174624e-7, -2.436540009125466e-7, -2.2735966823277152e-7,
    -2.1215501713624524e-7, -1.9796717529513327e-7, -1.847281437099636e-7, -1.72374470806362e-7,
    -1.6084694832653552e-7, -1.5009032755797365e-7, -1.4005305453932197e-7, -1.3068702297433476e-7,
    -1.2194734366967383e-7, -1.137921293915314e-7, -1.0618229410993847e-7, -9.908136566858666e-8,
    -9.24553109823358e-8, -8.62723729246145e-8, -8.050291812295973e-8, -7.511929493320969e-8,
    -7.009570091165618e-8, -6.540805914998259e-8, -6.103390288028621e-8, -5.695226779712831e-8,
    -5.3143591580532415e-8, -4.958962013837212e-8, -4.627332011878693e-8, -4.317879727332022e-8,
    -4.029122027951352e-8, -3.7596749657854675e-8, -3.508247144239789e-8, -3.2736335287152474e-8,
    -3.054709671159968e-8, -2.8504263208534376e-8, -2.6598043955937583e-8, -2.4819302891862526e-8,
    -2.3159514927431545e-8, -2.1610725088083766e-8, -2.0165510387247485e-8, -1.8816944249705555e-8,
    -1.755856331414467e-8, -1.6384336455779847e-8, -1.5288635880587295e-8, -1.4266210152607384e-8,
    -1.3312159025043076e-8, -1.2421909954526187e-8, -1.1591196185988856e-8, -1.0816036303107095e-8,
    -1.0092715146305718e-8, -9.417766006869538e-9, -8.787954011821328e-9, -8.20026061993413e-9,
    -7.651869154570818e-9, -7.1401513040133885e-9, -6.662654524581163e-9, -6.217090286163834e-9,
    -5.801323103833378e-9, -5.413360302965376e-9, -5.051342468816756e-9, -4.713534534786917e-9,
    -4.3983174666502286e-9, -4.10418050290471e-9, -3.829713914046277e-9, -3.573602246065781e-9,
    -3.3346180157863693e-9, -3.111615827824363e-9, -2.9035268849778137e-9, -2.7093538657320487e-9,
    -2.5281661443314954e-9, -2.3590953305086387e-9, -2.2013311074930324e-9, -2.0541173483530643e-9,
    -1.916748492056813e-9, -1.7885661618834582e-9, -1.6689560099780266e-9, -1.5573447729261352e-9,
    -1.4531975242368954e-9, -1.356015110565632e-9, -1.2653317593889455e-9, -1.1807128466661915e-9,
    -1.1017528137883873e-9, -1.0280732238308647e-9, -9.593209477938231e-10, -8.95166472137832e-10,
    -8.353023195026787e-10, -7.794415750404951e-10, -7.273165113001454e-10, -6.786773050723288e-10,
    -6.332908400455127e-10, -5.909395895340977e-10, -5.514205739240302e-10, -5.145443878390925e-10,
    -4.801342923653445e-10, -4.4802536798294986e-10, -4.180637241455762e-10, -3.901057617190993e-10,
    -3.6401748474461374e-10, -3.396738582272203e-10, -3.1695820887261217e-10, -2.9576166589932564e-10,
    -2.7598263924661805e-10, -2.575263326771199e-10, -2.4030428944069647e-10, -2.2423396832198497e-10,
    -2.0923834803969792e-10, -1.952455581016861e-10, -1.8218853434651652e-10, -1.7000469752067147e-10,
    -1.5863565335085928e-10, -1.4802691267395102e-10, -1.3812763028320095e-10, -1.2889036123908917e-10,
    -1.2027083347685096e-10, -1.1222773562085094e-10, -1.0472251898884355e-10, -9.771921283717997e-11,
    -9.118425196146562e-11, -8.508631582640565e-11, -7.939617845382292e-11, -7.408656834939567e-11,
    -6.913203779678128e-11, -6.450884089267686e-11, -6.019481973827261e-11, -5.616929824163815e-11,
    -5.2412983022060616e-11, -4.8907870941395896e-11, -4.563716281924754e-11, -4.258518291843423e-11,
    -3.973730381485612e-11, -3.707987629168172e-11, -3.460016392185109e-11, -3.228628202536727e-11,
    -3.01271407088117e-11, -2.811239171408467e-11, -2.6232378821631238e-11, -2.4478091570444403e-11,
    -2.284112207303821e-11, -2.131362471841442e-11, -1.988827856988812e-11, -1.855825227755519e-11,
    -1.731717133723353e-11, -1.615908753895916e-11, -1.507845045861054e-11, -1.4070080856026865e-11,
    -1.3129145852124653e-11, -1.2251135766041177e-11, -1.143184250129148e-11, -1.0667339377348592e-11,
    -9.953962309984244e-12, -9.288292250172499e-12, -8.667138797389224e-12, -8.08752490877044e-12,
    -7.546672630843902e-12, -7.041989785449296e-12, -6.57105754603627e-12, -6.131618844795769e-12,
    -5.7215675550632404e-12, -5.338938397147361e-12, -4.9818975192051654e-12, -4.648733708020257e-12,
    -4.337850187558984e-12, -4.047756965997314e-12, -3.777063694539372e-12, -3.524473003801588e-12,
    -3.28877428582551e-12, -3.0688378919176393e-12, -2.86360971850811e-12, -2.672106155079438e-12,
    -2.4934093699518803e-12, -2.326662911331458e-12, -2.171067602537263e-12, -2.0258777117350212e-12,
    -1.8903973778192236e-12, -1.7639772753140453e-12, -1.6460115023085496e-12, -1.5359346765108954e-12,
    -1.4332192255035769e-12, -1.3373728582124977e-12, -1.2479362054713115e-12, -1.1644806183726855e-12,
    -1.0866061138545958e-12, -1.013939457675294e-12, -9.461323755890779e-13, -8.82859884149515e-13,
    -8.238187331399601e-13, -7.68725952166372e-13, -7.173174944465627e-13, -6.693469712958668e-13,
    -6.245844712439618e-13, -5.82815458123084e-13, -5.43839742846479e-13, -5.074705239490476e-13,
    -4.735334922917121e-13, -4.418659956385941e-13, -4.123162591029748e-13, -3.847426577258498e-13,
    -3.5901303770070756e-13, -3.350040829913136e-13, -3.1260072430687037e-13, -2.916955876018793e-13,
    -2.721884794575174e-13, -2.539859068780729e-13, -2.3700062920093303e-13, -2.2115123997254888e-13,
    -2.0636177678638565e-13, -1.9256135721291948e-13, -1.796838390767723e-13, -1.676675034527701e-13,
    -1.5645475886160958e-13, -1.4599186524739771e-13, -1.362286764141644e-13, -1.27118399686903e-13,
    -1.186173716452479e-13, -1.106848488549412e-13, -1.0328281259410275e-13, -9.637578663841109e-14,
    -8.993066723187632e-14, -8.391656442830161e-14, -7.830465404301183e-14, -7.306803950529492e-14,
    -6.818162294944493e-14, -6.362198492657495e-14, -5.936727216069126e-14, -5.5397092811064003e-14,
    -5.169241873891593e-14, -4.823549431001477e-14, -4.500975129608051e-14, -4.199972946715306e-14,
    -3.919100249433402e-14, -3.657010880777486e-14, -3.412448707852896e-14, -3.184241601504656e-14,
    -2.971295818577334e-14, -2.7725907598604812e-14, -2.5871740785959185e-14, -2.4141571161030227e-14,
    -2.2527106426459827e-14, -2.1020608831301583e-14, -1.9614858085794294e-14, -1.8303116756206092e-14,
    -1.7079097973894305e-14, -1.593693530381776e-14, -1.4871154628089536e-14, -1.387664790981307e-14,
    -1.2948648711459023e-14, -1.2082709350447785e-14, -1.1274679582449472e-14, -1.0520686710236229e-14,
    -9.817117022752184e-15, -9.160598475443691e-15, -8.547984528840422e-15, -7.976339067929282e-15,
    -7.442922330043758e-15, -6.9451777738236895e-15, -6.480719826311958e-15, -6.047322449462655e-15,
    -5.642908471262542e-15, -5.265539630332756e-15, -4.9134072862963564e-15, -4.5848237513891055e-15,
    -4.278214201767622e-15, -3.992109129748054e-15, -3.7251373008002096e-15, -3.476019181541974e-15,
    -3.243560807235818e-15, -3.0266480593956954e-15, -2.8242413260784356e-15, -2.635370519267393e-15,
    -2.4591304254680415e-15, -2.294676367231941e-15, -2.1412201548157316e-15, -1.9980263085725508e-15,
    -1.8644085339704854e-15, -1.739726432343799e-15, -1.6233824316122815e-15, -1.5148189222583473e-15,
    -1.4135155848353956e-15, -1.3189868961986691e-15, -1.2307798025066632e-15, -1.1484715478402913e-15,
    -1.0716676480328644e-15, -1.0e-15, 0.0, 1.0e-15, 1.0716676480328644e-15, 1.1484715478402913e-15,
    1.2307798025066632e-15, 1.3189868961986691e-15, 1.4135155848353956e-15, 1.5148189222583473e-15,
    1.6233824316122815e-15, 1.739726432343799e-15, 1.8644085339704854e-15, 1.9980263085725508e-15,
    2.1412201548157316e-15, 2.294676367231941e-15, 2.4591304254680415e-15, 2.635370519267393e-15,
    2.8242413260784356e-15, 3.0266480593956954e-15, 3.243560807235818e-15, 3.476019181541974e-15,
    3.7251373008002096e-15, 3.992109129748054e-15, 4.278214201767622e-15, 4.5848237513891055e-15,
    4.9134072862963564e-15, 5.265539630332756e-15, 5.642908471262542e-15, 6.047322449462655e-15,
    6.480719826311958e-15, 6.9451777738236895e-15, 7.442922330043758e-15, 7.976339067929282e-15,
    8.547984528840422e-15, 9.160598475443691e-15, 9.817117022752184e-15, 1.0520686710236229e-14,
    1.1274679582449472e-14, 1.2082709350447785e-14, 1.2948648711459023e-14, 1.387664790981307e-14,
    1.4871154628089536e-14, 1.593693530381776e-14, 1.7079097973894305e-14, 1.8303116756206092e-14,
    1.9614858085794294e-14, 2.1020608831301583e-14, 2.2527106426459827e-14, 2.4141571161030227e-14,
    2.5871740785959185e-14, 2.7725907598604812e-14, 2.971295818577334e-14, 3.184241601504656e-14,
    3.412448707852896e-14, 3.657010880777486e-14, 3.919100249433402e-14, 4.199972946715306e-14,
    4.500975129608051e-14, 4.823549431001477e-14, 5.169241873891593e-14, 5.5397092811064003e-14,
    5.936727216069126e-14, 6.362198492657495e-14, 6.818162294944493e-14, 7.306803950529492e-14,
    7.830465404301183e-14, 8.391656442830161e-14, 8.993066723187632e-14, 9.637578663841109e-14,
    1.0328281259410275e-13, 1.106848488549412e-13, 1.186173716452479e-13, 1.27118399686903e-13,
    1.362286764141644e-13, 1.4599186524739771e-13, 1.5645475886160958e-13, 1.676675034527701e-13,
    1.796838390767723e-13, 1.9256135721291948e-13, 2.0636177678638565e-13, 2.2115123997254888e-13,
    2.3700062920093303e-13, 2.539859068780729e-13, 2.721884794575174e-13, 2.916955876018793e-13,
    3.1260072430687037e-13, 3.350040829913136e-13, 3.5901303770070756e-13, 3.847426577258498e-13,
    4.123162591029748e-13, 4.418659956385941e-13, 4.735334922917121e-13, 5.074705239490476e-13,
    5.43839742846479e-13, 5.82815458123084e-13, 6.245844712439618e-13, 6.693469712958668e-13,
    7.173174944465627e-13, 7.68725952166372e-13, 8.238187331399601e-13, 8.82859884149515e-13,
    9.461323755890779e-13, 1.013939457675294e-12, 1.0866061138545958e-12, 1.1644806183726855e-12,
    1.2479362054713115e-12, 1.3373728582124977e-12, 1.4332192255035769e-12, 1.5359346765108954e-12,
    1.6460115023085496e-12, 1.7639772753140453e-12, 1.8903973778192236e-12, 2.0258777117350212e-12,
    2.171067602537263e-12, 2.326662911331458e-12, 2.4934093699518803e-12, 2.672106155079438e-12,
    2.86360971850811e-12, 3.0688378919176393e-12, 3.28877428582551e-12, 3.524473003801588e-12,
    3.777063694539372e-12, 4.047756965997314e-12, 4.337850187558984e-12, 4.648733708020257e-12,
    4.9818975192051654e-12, 5.338938397147361e-12, 5.7215675550632404e-12, 6.131618844795769e-12,
    6.57105754603627e-12, 7.041989785449296e-12, 7.546672630843902e-12, 8.08752490877044e-12,
    8.667138797389224e-12, 9.288292250172499e-12, 9.953962309984244e-12, 1.0667339377348592e-11,
    1.143184250129148e-11, 1.2251135766041177e-11, 1.3129145852124653e-11, 1.4070080856026865e-11,
    1.507845045861054e-11, 1.615908753895916e-11, 1.731717133723353e-11, 1.855825227755519e-11,
    1.988827856988812e-11, 2.131362471841442e-11, 2.284112207303821e-11, 2.4478091570444403e-11,
    2.6232378821631238e-11, 2.811239171408467e-11, 3.01271407088117e-11, 3.228628202536727e-11,
    3.460016392185109e-11, 3.707987629168172e-11, 3.973730381485612e-11, 4.258518291843423e-11,
    4.563716281924754e-11, 4.8907870941395896e-11, 5.2412983022060616e-11, 5.616929824163815e-11,
    6.019481973827261e-11, 6.450884089267686e-11, 6.913203779678128e-11, 7.408656834939567e-11,
    7.939617845382292e-11, 8.508631582640565e-11, 9.118425196146562e-11, 9.771921283717997e-11,
    1.0472251898884355e-10, 1.1222773562085094e-10, 1.2027083347685096e-10, 1.2889036123908917e-10,
    1.3812763028320095e-10, 1.4802691267395102e-10, 1.5863565335085928e-10, 1.7000469752067147e-10,
    1.8218853434651652e-10, 1.952455581016861e-10, 2.0923834803969792e-10, 2.2423396832198497e-10,
    2.4030428944069647e-10, 2.575263326771199e-10, 2.7598263924661805e-10, 2.9576166589932564e-10,
    3.1695820887261217e-10, 3.396738582272203e-10, 3.6401748474461374e-10, 3.901057617190993e-10,
    4.180637241455762e-10, 4.4802536798294986e-10, 4.801342923653445e-10, 5.145443878390925e-10,
    5.514205739240302e-10, 5.909395895340977e-10, 6.332908400455127e-10, 6.786773050723288e-10,
    7.273165113001454e-10, 7.794415750404951e-10, 8.353023195026787e-10, 8.95166472137832e-10,
    9.593209477938231e-10, 1.0280732238308647e-9, 1.1017528137883873e-9, 1.1807128466661915e-9,
    1.2653317593889455e-9, 1.356015110565632e-9, 1.4531975242368954e-9, 1.5573447729261352e-9,
    1.6689560099780266e-9, 1.7885661618834582e-9, 1.916748492056813e-9, 2.0541173483530643e-9,
    2.2013311074930324e-9, 2.3590953305086387e-9, 2.5281661443314954e-9, 2.7093538657320487e-9,
    2.9035268849778137e-9, 3.111615827824363e-9, 3.3346180157863693e-9, 3.573602246065781e-9,
    3.829713914046277e-9, 4.10418050290471e-9, 4.3983174666502286e-9, 4.713534534786917e-9,
    5.051342468816756e-9, 5.413360302965376e-9, 5.801323103833378e-9, 6.217090286163834e-9,
    6.662654524581163e-9, 7.1401513040133885e-9, 7.651869154570818e-9, 8.20026061993413e-9,
    8.787954011821328e-9, 9.417766006869538e-9, 1.0092715146305718e-8, 1.0816036303107095e-8,
    1.1591196185988856e-8, 1.2421909954526187e-8, 1.3312159025043076e-8, 1.4266210152607384e-8,
    1.5288635880587295e-8, 1.6384336455779847e-8, 1.755856331414467e-8, 1.8816944249705555e-8,
    2.0165510387247485e-8, 2.1610725088083766e-8, 2.3159514927431545e-8, 2.4819302891862526e-8,
    2.6598043955937583e-8, 2.8504263208534376e-8, 3.054709671159968e-8, 3.2736335287152474e-8,
    3.508247144239789e-8, 3.7596749657854675e-8, 4.029122027951352e-8, 4.317879727332022e-8,
    4.627332011878693e-8, 4.958962013837212e-8, 5.3143591580532415e-8, 5.695226779712831e-8,
    6.103390288028621e-8, 6.540805914998259e-8, 7.009570091165618e-8, 7.511929493320969e-8,
    8.050291812295973e-8, 8.62723729246145e-8, 9.24553109823358e-8, 9.908136566858666e-8,
    1.0618229410993847e-7, 1.137921293915314e-7, 1.2194734366967383e-7, 1.3068702297433476e-7,
    1.4005305453932197e-7, 1.5009032755797365e-7, 1.6084694832653552e-7, 1.72374470806362e-7,
    1.847281437099636e-7, 1.9796717529513327e-7, 2.1215501713624524e-7, 2.2735966823277152e-7,
    2.436540009125466e-7, 2.6111611009174624e-7, 2.798296875655116e-7, 2.9988442312310307e-7,
    3.2137643441002754e-7, 3.4440872759738236e-7, 3.6909169106627744e-7, 3.9554362447347016e-7,
    4.2389130573387833e-7, 4.5427059863740426e-7, 4.868271040122284e-7, 5.217168575554344e-7,
    5.591070776755293e-7, 5.991769669310625e-7, 6.421185709064758e-7, 6.88137698641567e-7,
    7.374549090259546e-7, 7.903065678861348e-7, 8.469459808314593e-7, 9.076446072885357e-7,
    9.72693361542618e-7, 1.0424040070215557e-6, 1.1171106505048242e-6, 1.1971713434189682e-6,
    1.2829697978941475e-6, 1.3749172258064205e-6, 1.4734543096198343e-6, 1.579053314474176e-6,
    1.6922203516410355e-6, 1.8134978041964953e-6, 1.943466926536022e-6, 2.0827506301905143e-6,
    2.2320164692952345e-6, 2.391979840020237e-6, 2.563407409296515e-6, 2.7471207892708145e-6,
    2.9440004751000336e-6, 3.1549900649580885e-6, 3.381100782480682e-6, 3.6234163233231498e-6,
    3.883098049059609e-6, 4.161390553316707e-6, 4.459627626819096e-6, 4.779238649935595e-6,
    5.121755443364241e-6, 5.488819609789677e-6, 5.882190401699956e-6, 6.3037531530712815e-6,
    6.75552831533164e-6, 7.2396811409108765e-6, 7.758532060787827e-6, 8.314567805772065e-6,
    8.910453324821521e-6, 9.549044557518079e-6, 1.0233402121916423e-5, 1.0966805983368674e-5,
    1.1752771174629452e-5, 1.2595064642583589e-5, 1.3497723302339418e-5, 1.4465073385216472e-5,
    1.5501751173357687e-5, 1.661272522034293e-5, 1.7803320164301157e-5, 1.907924224765265e-5,
    2.0446606665791178e-5, 2.1911966875781472e-5, 2.3482346005542763e-5, 2.516527051405394e-5,
    2.6968806263906926e-5, 2.8901597179095115e-5, 3.0972906673314065e-5, 3.31926620473319e-5,
    3.5571502068213896e-5, 3.812082795843888e-5, 4.0852858039285654e-5, 4.3780686290381665e-5,
    4.691834510607799e-5, 5.028087254942475e-5, 5.3884384426082236e-5, 5.774615152359826e-5,
    6.188468238624383e-5, 6.631981202212676e-5, 7.107279696773412e-5, 7.616641716552892e-5,
    8.162508514287237e-5, 8.747496301554415e-5, 9.374408787663e-5, 0.00010046250617173413,
    0.00010766241770454933, 0.00011537832996296608, 0.0001236472235053715, 0.00013250872919979526,
    0.00014200531816536833, 0.0001521825053264387, 0.00016308906755493327, 0.00017477727744646807,
    0.00018730315385064364, 0.00020072673035625703, 0.00021511234301821672, 0.00023052893870517083,
    0.00024705040554568255, 0.00026475592705670666, 0.00028373036165162114, 0.0003040646493467069,
    0.00032585624761532263, 0.00034920959847872714, 0.0003742366290721981, 0.0004010572880855496,
    0.00042980012064907985, 0.0004606028844202403, 0.0004936132098237916, 0.0005289893076098151,
    0.0005669007271207433, 0.0006075291689016071, 0.0006510693555481462, 0.0006977299649665538,
    0.0007477346305177588, 0.0008013230128396887, 0.0008587519484845171, 0.0009202966808760419,
    0.0009862521794868784, 0.0010569345535579883, 0.0011326825671361539, 0.0012138592626906278,
    0.0013008537010905706, 0.0013940828262825786, 0.0014939934636052578, 0.0016010644613183177,
    0.0017158089856100047, 0.0018387769800823268, 0.0019705578015018, 0.0021117830444482445,
    0.0022631295683995297, 0.002425322741760353, 0.002599139918382933, 0.002785414163241766,
    0.0029850382451187324, 0.0031989689154345376, 0.0034282314937339707, 0.0036739247818020743,
    0.0039372263299634795, 0.0042193980808050285, 0.004521792417370702, 0.004845858644816496,
    0.005193149936590212, 0.005565330778427646, 0.005964184945842466, 0.006391624053344006,
    0.006849696716357447, 0.007340598369757212, 0.007866681790071581, 0.008430468371788968,
    0.009034660211810534, 0.009682153059967086, 0.010376050197669117, 0.011119677311206989,
    0.011916598430985593, 0.01277063301308644, 0.013685874245025185, 0.014666708663439686,
    0.015717837177731626, 0.016844297600423153, 0.018051488792211093, 0.019345196537440452,
    0.02073162127401231, 0.022217407810628847, 0.023809677173803584, 0.02551606073727185,
    0.027344736797375813, 0.02930446976972143, 0.03140465219496752, 0.033655349755070944,
    0.03606734951574028, 0.03865221162631264, 0.041422324724838956, 0.04439096531392171,
    0.0475723613918789, 0.050981760644204246, 0.054635503522148784, 0.05855110155867241,
    0.06274732129711577, 0.0672442742348425, 0.07206351321293053, 0.07722813571388647,
    0.08276289456246348, 0.08869431656014709, 0.09505082962189512, 0.10186289902446875,
    0.1091631734193615, 0.11698664131013073, 0.12537079874409204, 0.1343558290220826,
    0.1439847952876008, 0.15430384691835647, 0.16536244070941808, 0.17721357790803594,
    0.18991405823619345, 0.20352475211835772, 0.218110892419152, 0.23374238708918155,
    0.2504941542174503, 0.2684464810961964, 0.28768540901905937, 0.3083031456568277,
    0.33039850698718587, 0.35407739089652707, 0.37945328472369405, 0.40664780917818566,
    0.4357913012397029, 0.4670234388327335, 0.5004939102700954, 0.5363631316739242,
    0.5748030158125355, 0.6159977960380167, 0.6601449092734889, 0.7074559422819879,
    0.7581576457522112, 0.8124930210614051, 0.8707224849239918, 0.9331251175078248, 1.0,
];